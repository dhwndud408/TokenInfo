{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OhJuYoung\\\\Desktop\\\\EthereumApp\\\\token-web\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.ConnectMetaMask = async () => {\n      if (window.ethereum) {\n        console.log(' MetaMask 연결 최신 방법 ');\n        this.web3 = new Web3(window.ethereum);\n\n        try {\n          await window.ethereum.enable();\n        } catch (error) {\n          console.log(`User denied account access error : ${error}`);\n        }\n      } else if (window.web3) {\n        console.log(' MetaMask 연결 이전 방법 ');\n        this.web3 = new Web3(Web3.currentProvider);\n      } else {\n        console.log('ERORR! MetaMask not installed');\n      }\n    };\n  }\n\n  async componentDidMount() {\n    // 비동기로 MetaMask(Web3) 연결\n    await this.ConnectMetaMask(); // Target Token (Smart Contract) 연결\n\n    this.token_address = \"\";\n    this.token_abi = [];\n    this.token_contract = new this.web3.eth.Contract(this.token_abi, this.token_address); // 연결된 MetaMask의 계정 가져오기\n\n    let accounts = await this.web3.eth.getAccounts();\n    this.account_acctress = accounts[0]; // Token (Smart Contract)의 함수 호출\n    // \"계약명\".methods.\"함수명\".call();\n\n    this.token_contract.methods.balanceOf().call();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }\n    }, \" src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n      className: \"App-link\",\n      href: \"https://react.org\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }), \"Learn React\"));\n  }\n\n} // index address challenge answer pot status answerBlockNumber\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/OhJuYoung/Desktop/EthereumApp/token-web/src/App.js"],"names":["React","Component","Web3","App","constructor","props","ConnectMetaMask","window","ethereum","console","log","web3","enable","error","currentProvider","componentDidMount","token_address","token_abi","token_contract","eth","Contract","accounts","getAccounts","account_acctress","methods","balanceOf","call","render","logo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AAEA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAE1BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAuBnBC,eAvBmB,GAuBD,YAAY;AAC5B,UAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aAAKC,IAAL,GAAY,IAAIT,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAZ;;AACA,YAAI;AACA,gBAAMD,MAAM,CAACC,QAAP,CAAgBI,MAAhB,EAAN;AACH,SAFD,CAEE,OAAOC,KAAP,EAAc;AACZJ,UAAAA,OAAO,CAACC,GAAR,CAAa,sCAAqCG,KAAM,EAAxD;AACH;AACF,OARD,MASK,IAAIN,MAAM,CAACI,IAAX,EAAiB;AACpBF,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aAAKC,IAAL,GAAY,IAAIT,IAAJ,CAASA,IAAI,CAACY,eAAd,CAAZ;AACD,OAHI,MAIA;AACHL,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD;AACF,KAxCkB;AAGlB;;AAED,QAAMK,iBAAN,GAA0B;AACxB;AACA,UAAM,KAAKT,eAAL,EAAN,CAFwB,CAIxB;;AACA,SAAKU,aAAL,GAAqB,EAArB;AACA,SAAKC,SAAL,GAAgB,EAAhB;AACA,SAAKC,cAAL,GAAsB,IAAI,KAAKP,IAAL,CAAUQ,GAAV,CAAcC,QAAlB,CAA2B,KAAKH,SAAhC,EAA2C,KAAKD,aAAhD,CAAtB,CAPwB,CASxB;;AACA,QAAIK,QAAQ,GAAG,MAAM,KAAKV,IAAL,CAAUQ,GAAV,CAAcG,WAAd,EAArB;AACA,SAAKC,gBAAL,GAAwBF,QAAQ,CAAC,CAAD,CAAhC,CAXwB,CAaxB;AACA;;AACA,SAAKH,cAAL,CAAoBM,OAApB,CAA4BC,SAA5B,GAAwCC,IAAxC;AACD;;AAqBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,GAAG,EAAEC,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADP,yBAFJ,eAKI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAwB,MAAA,IAAI,EAAC,mBAA7B;AAAiD,MAAA,MAAM,EAAC,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,gBADF,CADF;AAeD;;AA5DyB,C,CA8D5B;;;AACA,eAAezB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Web3 from 'web3';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n  \n  }\n\n  async componentDidMount() {\n    // 비동기로 MetaMask(Web3) 연결\n    await this.ConnectMetaMask();\n\n    // Target Token (Smart Contract) 연결\n    this.token_address = \"\";\n    this.token_abi =[];\n    this.token_contract = new this.web3.eth.Contract(this.token_abi, this.token_address);\n\n    // 연결된 MetaMask의 계정 가져오기\n    let accounts = await this.web3.eth.getAccounts();\n    this.account_acctress = accounts[0];\n\n    // Token (Smart Contract)의 함수 호출\n    // \"계약명\".methods.\"함수명\".call();\n    this.token_contract.methods.balanceOf().call();\n  }\n\n  ConnectMetaMask = async () => {\n    if (window.ethereum) {\n      console.log(' MetaMask 연결 최신 방법 ')\n      this.web3 = new Web3(window.ethereum);\n      try {\n          await window.ethereum.enable();\n      } catch (error) {\n          console.log(`User denied account access error : ${error}`)\n      }\n    }\n    else if (window.web3) {\n      console.log(' MetaMask 연결 이전 방법 ')\n      this.web3 = new Web3(Web3.currentProvider);\n    }\n    else {\n      console.log('ERORR! MetaMask not installed');\n    }    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code> src/App.js</code> and save to reload.\n            </p>      \n            <a className=\"App-link\" href=\"https://react.org\" target=\"_blank\" >\n            </a>\n            Learn React\n\n\n        </header>\n      </div>\n    );\n  }\n}\n// index address challenge answer pot status answerBlockNumber\nexport default App;"]},"metadata":{},"sourceType":"module"}